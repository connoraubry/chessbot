import numpy as np 

def bboard_print(n):
    mask = 255
    for i in range(56, -1, -8):
        print(np.binary_repr((n >> i) & mask, 8)[::-1])
def array_or(arr):
    n = np.int64(0)
    for a in arr:
        n |= a
    return n
def array_and(arr):
    n = np.int64(-1)
    for a in arr:
        n &= a
    return n 

def rank_file(n):
        return n // 8, n % 8


## Straightaways 

#bit to board mapping
'''
56 57 58 59 60 61 62 63 
48 49 50 51 52 53 54 55 
40 41 42 43 44 45 46 47 
32 33 34 35 36 37 38 39 
24 25 26 27 28 29 30 31 
16 17 18 19 20 21 22 23 
 8  9 10 11 12 13 14 15 
 0  1  2  3  4  5  6  7 
'''
# rank of piece == n//8 or (n-(n&7)) >> 3
#ranks[0] is 'a' rank mask, ranks[1] is 'b' rank mask, etc. 
# ranks = [np.int64(255) << (8*i) for i in range(8)]
ranks = np.array([255,
        65280,
        16711680,
        4278190080,
        1095216660480,
        280375465082880,
        71776119061217280,
        -72057594037927936], dtype=np.int64)

# file of piece == n % 8 (or n & 7)
# files[0] is '1' file mask, files[1] if '2' file mask, etc. 
# files = [np.int64(72340172838076673) << i for i in range(8)]
files = np.array([
        72340172838076673,
        144680345676153346,
        289360691352306692,
        578721382704613384,
        1157442765409226768,
        2314885530818453536,
        4629771061636907072,
        -9187201950435737472], dtype=np.int64)

#Diagonals 
def get_upright_diagonal(n):
        return upright_diagonals[upright_diagonal_address[n]]
def get_upleft_diagonal(n):
        return upleft_diagonals[upleft_diagonal_address[n]]
upright_diagonals = np.array([
        72057594037927936,
        144396663052566528,
        288794425616760832,
        577588855528488960,
        1155177711073755136,
        2310355422147575808,
        4620710844295151872,
        -9205322385119247871,
        36099303471055874,
        141012904183812,
        550831656968,
        2151686160,
        8405024,
        32832,
        128], dtype=np.int64)

upright_diagonal_address =  [
                7, 8, 9, 10, 11, 12, 13, 14,
                6, 7, 8,  9, 10, 11, 12, 13,
                5, 6, 7,  8,  9, 10, 11, 12,
                4, 5, 6,  7,  8,  9, 10, 11,
                3, 4, 5,  6,  7,  8,  9, 10,
                2, 3, 4,  5,  6,  7,  8,  9,
                1, 2, 3,  4,  5,  6,  7,  8,
                0, 1, 2,  3,  4,  5,  6,  7]

upleft_diagonals = np.array([1,
        258,
        66052,
        16909320,
        4328785936,
        1108169199648,
        283691315109952,
        72624976668147840,
        145249953336295424,
        290499906672525312,
        580999813328273408,
        1161999622361579520,
        2323998145211531264,
        4647714815446351872,
        -9223372036854775808], dtype=np.int64)

upleft_diagonal_address = [
                0, 1, 2,  3,  4,  5,  6,  7,
                1, 2, 3,  4,  5,  6,  7,  8,
                2, 3, 4,  5,  6,  7,  8,  9,
                3, 4, 5,  6,  7,  8,  9, 10,
                4, 5, 6,  7,  8,  9, 10, 11,
                5, 6, 7,  8,  9, 10, 11, 12,
                6, 7, 8,  9, 10, 11, 12, 13,
                7, 8, 9, 10, 11, 12, 13, 14]



powers_of_two = [np.int64(1) << i for i in range(64)]

## Knights

# def get_knight_bboard(n):
    
#     rank, file = rank_file(n)
#     rank_bb = knight_ranks[rank]
#     rank_bb_start = knight_rank_starts[rank]
#     diff_rank = n-rank_bb_start
#     if diff_rank > 0:
#         rank_bb = rank_bb << diff_rank
#     else:
#         rank_bb = rank_bb >> (-1*diff_rank)

#     file_bb = knight_files[file]
#     file_bb_start = knight_file_starts[file]
#     nr, _ = rank_file(file_bb_start)
#     diff_file = rank - nr 
#     if diff_file > 0:
#         file_bb = file_bb << (diff_file*8)
#     else:
#         file_bb = file_bb >> (-1*diff_file*8)

#     return rank_bb & file_bb

knight_attack_bboard = np.array([          
                     132096,               329728,               659712,
                    1319424,              2638848,              5277696,
                   10489856,              4202496,             33816580,
                   84410376,            168886289,            337772578,
                  675545156,           1351090312,           2685403152,
                 1075839008,           8657044482,          21609056261,
                43234889994,          86469779988,         172939559976,
               345879119952,         687463207072,         275414786112,
              2216203387392,        5531918402816,       11068131838464,
             22136263676928,       44272527353856,       88545054707712,
            175990581010432,       70506185244672,      567348067172352,
           1416171111120896,     2833441750646784,     5666883501293568,
          11333767002587136,    22667534005174272,    45053588738670592,
          18049583422636032,   145241105196122112,   362539804446949376,
         725361088165576704,  1450722176331153408,  2901444352662306816,
        5802888705324613632, -6913025356609880064,  4620693356194824192,
         288234782788157440,   576469569871282176,  1224997833292120064,
        2449995666584240128,  4899991333168480256, -8646761407372591104,
        1152939783987658752,  2305878468463689728,     1128098930098176,
           2257297371824128,     4796069720358912,     9592139440717824,
          19184278881435648,    38368557762871296,     4679521487814656,
           9077567998918656], dtype=np.int64)
knight_ranks = np.array([
        659712,
        168886289,
        43234889994,
        11068131838464,
        2833441750646784,
        725361088165576704,
        1224997833292120064,
        4796069720358912
], dtype=np.int64)
knight_rank_starts = [
        2, 10, 18, 26, 34, 42, 50, 58
]

knight_files = np.array([
        8657044482,
        21609056261,
        43234889994,
        86469779988,
        172939559976,
        345879119952,
        687463207072,
        275414786112,
], dtype=np.int64)
knight_file_starts = [
        16, 17, 18, 19, 20, 21, 22, 23
]